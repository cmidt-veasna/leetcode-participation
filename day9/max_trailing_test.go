package day9

import (
	"testing"
	"time"

	"github.com/stretchr/testify/require"
)

type maxTrailingCase struct {
	in  [][]int
	out int
}

var maxTrailingCases = []*maxTrailingCase{
	{[][]int{
		{23, 17, 15, 3, 20},
		{8, 1, 20, 27, 11},
		{9, 4, 6, 2, 21},
		{40, 9, 1, 10, 6},
		{22, 7, 4, 5, 3},
	},
		3},
	{[][]int{
		{4, 3, 2}, {7, 6, 1}, {8, 8, 8},
	},
		0},
	{[][]int{
		{437, 230, 648, 905, 744, 416}, {39, 193, 421, 344, 755, 154}, {480, 200, 820, 226, 681, 663}, {658, 65, 689, 621, 398, 608}, {680, 741, 889, 297, 530, 547}, {809, 760, 975, 874, 524, 717},
	},
		7},
	{[][]int{
		{961, 177, 735, 299, 381, 295, 714}, {52, 317, 629, 876, 287, 714, 416}, {707, 250, 159, 17, 1000, 589, 182}, {337, 365, 295, 817, 263, 325, 740}, {117, 290, 467, 353, 272, 235, 779}, {846, 10, 532, 499, 655, 215, 592}, {875, 107, 820, 325, 797, 53, 782}, {336, 32, 795, 10, 718, 680, 846}, {372, 49, 362, 903, 851, 165, 32}, {691, 486, 989, 316, 429, 451, 465}, {24, 607, 278, 658, 591, 465, 563}, {388, 828, 200, 641, 831, 273, 845}, {266, 46, 32, 800, 556, 369, 861}, {935, 652, 662, 207, 524, 475, 924}, {309, 928, 61, 363, 999, 292, 84}, {535, 930, 60, 938, 493, 418, 713}, {474, 77, 282, 673, 491, 699, 376}, {709, 787, 529, 447, 259, 758, 322}, {94, 547, 367, 432, 610, 97, 123}, {242, 387, 188, 430, 797, 720, 327}, {740, 818, 108, 260, 284, 651, 383}, {24, 284, 387, 639, 828, 210, 923}, {504, 606, 724, 440, 30, 383, 410},
	},
		16},
	{[][]int{
		{355, 544, 726, 430, 997, 251, 261, 703, 795, 708, 239, 974, 563}, {744, 997, 705, 984, 393, 704, 505, 302, 154, 792, 200, 653, 834}, {548, 846, 596, 817, 916, 332, 135, 827, 591, 920, 943, 430, 88}, {185, 563, 254, 754, 421, 526, 221, 682, 642, 772, 340, 287, 970}, {908, 777, 989, 875, 384, 432, 864, 213, 53, 661, 66, 55, 369}, {427, 791, 594, 725, 836, 924, 769, 744, 590, 381, 277, 734, 521}, {428, 64, 892, 425, 950, 26, 281, 566, 198, 387, 244, 3, 667}, {243, 419, 17, 598, 289, 119, 653, 481, 226, 587, 382, 635, 251}, {411, 771, 617, 971, 26, 446, 891, 383, 427, 906, 23, 88, 363}, {396, 203, 128, 840, 560, 772, 554, 145, 137, 310, 113, 1, 784}, {878, 944, 739, 404, 818, 244, 266, 992, 834, 440, 270, 171, 707}, {848, 541, 771, 111, 465, 430, 736, 348, 709, 429, 23, 336, 457}, {9, 248, 567, 317, 617, 529, 351, 179, 753, 260, 627, 659, 264}, {205, 963, 325, 219, 273, 810, 352, 465, 510, 912, 191, 538, 586}, {52, 328, 752, 592, 80, 458, 915, 739, 873, 72, 577, 356, 642}, {185, 401, 779, 885, 500, 651, 881, 540, 294, 525, 909, 959, 215}, {980, 720, 187, 539, 273, 93, 505, 152, 531, 921, 640, 526, 963}, {852, 423, 920, 505, 600, 815, 575, 640, 164, 747, 127, 280, 134}, {767, 942, 843, 330, 450, 703, 907, 580, 714, 590, 546, 774, 376}, {390, 996, 356, 113, 452, 77, 704, 361, 182, 813, 516, 256, 665}, {602, 402, 938, 868, 326, 999, 265, 549, 862, 350, 29, 521, 969}, {860, 388, 839, 106, 596, 864, 710, 789, 395, 138, 381, 769, 677}, {767, 172, 539, 252, 710, 654, 529, 601, 86, 365, 172, 329, 476}, {621, 554, 405, 133, 208, 383, 316, 490, 743, 879, 225, 252, 781}, {796, 918, 69, 364, 838, 501, 749, 449, 844, 225, 360, 422, 389}, {945, 405, 692, 704, 195, 936, 352, 11, 800, 855, 166, 851, 314}, {98, 712, 202, 734, 551, 313, 269, 725, 550, 262, 106, 819, 244}, {470, 206, 150, 14, 16, 120, 713, 679, 653, 481, 522, 820, 878}, {820, 989, 798, 665, 255, 867, 541, 326, 186, 756, 522, 889, 720}, {396, 395, 78, 474, 250, 334, 257, 536, 922, 693, 763, 721, 289}, {61, 980, 510, 858, 631, 27, 313, 771, 188, 593, 484, 401, 171}, {631, 241, 383, 96, 987, 775, 578, 954, 894, 467, 25, 434, 375}, {646, 897, 939, 498, 202, 722, 260, 583, 271, 662, 377, 61, 561}, {37, 819, 257, 576, 452, 651, 633, 240, 165, 336, 159, 283, 600}, {168, 54, 722, 208, 442, 149, 738, 119, 25, 65, 937, 700, 363}, {800, 508, 436, 419, 165, 712, 889, 755, 843, 350, 394, 692, 132}, {549, 619, 38, 679, 409, 99, 851, 720, 537, 305, 464, 26, 292}, {346, 509, 446, 709, 970, 233, 790, 41, 730, 962, 634, 208, 497}, {647, 905, 400, 173, 127, 814, 309, 137, 451, 464, 411, 346, 491}, {36, 157, 393, 869, 903, 978, 915, 353, 438, 279, 877, 508, 349}, {621, 954, 696, 705, 291, 984, 410, 658, 906, 571, 366, 125, 779}, {502, 313, 631, 120, 228, 385, 634, 423, 477, 517, 632, 436, 537}, {543, 935, 258, 789, 987, 928, 156, 107, 630, 549, 432, 475, 564}, {601, 753, 351, 181, 11, 641, 804, 522, 959, 285, 9, 344, 757}, {638, 83, 804, 49, 562, 571, 378, 759, 916, 52, 447, 113, 325}, {963, 693, 202, 577, 261, 243, 666, 974, 114, 973, 766, 456, 414}, {859, 60, 48, 159, 796, 344, 418, 330, 114, 822, 82, 647, 601}, {279, 553, 61, 416, 502, 374, 861, 29, 180, 468, 271, 814, 419}, {508, 603, 16, 660, 540, 948, 390, 452, 730, 933, 790, 748, 213}, {313, 597, 31, 664, 115, 891, 323, 25, 909, 462, 474, 596, 679}, {576, 302, 619, 714, 98, 965, 22, 975, 847, 757, 740, 446, 900}, {741, 404, 431, 805, 413, 826, 946, 67, 832, 170, 530, 55, 324},
	},
		28},
}

func init() {
	println("prepare test")
	cc := &maxTrailingCase{}
	grid := make([][]int, 1000)
	for i := 0; i < 1000; i++ {
		grid[i] = make([]int, 100)
		for j := 0; j < 100; j++ {
			grid[i][j] = 1000
		}
	}
	cc.in, cc.out = grid, 3*(1000+99)
	maxTrailingCases = append(maxTrailingCases, cc)
	println("finish prepare test")
}

func TestMaxTrailingZeros(t *testing.T) {
	// m, cc := 0, 1
	// aa := []int{230, 193, 200, 65, 741, 760, 975, 874, 524, 717}
	// for _, v := range aa {
	// 	cc *= v
	// 	for ; cc%10 == 0; cc /= 10 {
	// 		m++
	// 	}
	// 	println("-->", m, v, cc)
	// }
	// println(m, cc)

	for i, tc := range maxTrailingCases {
		t.Logf("TestMaxTrailingZeros case #%d", i+1)
		start := time.Now()
		result := maxTrailingZeros(tc.in)
		println("    exec duration:", time.Since(start).String())
		require.Equal(t, tc.out, result)
	}
}
